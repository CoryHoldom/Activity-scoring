---
title: "Generate actigraphy summary"
author: "Cory Holdom"
format:
  html: default
  gfm: default
editor: visual
echo: true
root.dir: 
---

```{r Document information}
#| output: false
## ---------------------------
##
## Script name: 
##
## Purpose of script:
##
## Author: Dr. Cory Holdom
##
## Date Created: 2025-06-11
##
## Copyright (c) Cory Holdom, 2025
## Email: cory.holdom@ndcn.ox.ac.uk
##
## ---------------------------
##
## Notes:
##   
##
## ---------------------------

## load up our functions into memory

library(ggplot2)

source(here::here("Summary metrics/activity_bouts.R"))
source(here::here("Summary metrics/activity_index.R"))
source(here::here("Summary metrics/cum_power.R"))
source(here::here("Summary metrics/submovements.R"))



## ---------------------------
```

## Overview

Details of activity metrics reported for activity summary metrics.

```{r Data import}
header = GGIRread::readAxivity("../Example cwa/sample.cwa")$header

Data = GGIRread::readAxivity("../Example cwa/sample.cwa", start = 1, end = header$blocks, progressBar = T)

# Time is encoded as number of seconds since the epoch - multiply by 100 to get number of centiseconds since epoch
Data$data$int_time = Data$data$time * 100

Data$data$int_time = as.integer(round(Data$data$int_time) - round(Data$data$int_time[1]))

# Truncate last fraction of a second on end of recording
Data$data = Data$data[1:(floor(nrow(Data$data) / 100) * 100), ]
```

```{r Resampling attempt}

data_raw = Data$data

req_time = seq(data_raw$time[1], tail(data_raw$time, 1), 0.01)

data_resamp = GGIRread::resample(as.matrix(data_raw[c("x","y","z")]), data_raw$time, req_time, nrow(data_raw))

summary(data_raw[c("x","y","z")] - data_resamp)

## Conclusion: data have already been resampled

```

```{r Estimate activity indices}
stable_recording = Data$data[c(12000:13000),]

ggplot(Data$data[c(12000:330000),]) +
  theme_bw() +
  geom_line(aes(x = time, y = x), colour = "red", alpha = 0.5) +
  geom_line(aes(x = time, y = y), colour = "green", alpha = 0.5) +
  geom_line(aes(x = time, y = z), colour = "blue", alpha = 0.5)

stat_var = calculate_stationary_variance(stationary_signal = stable_recording[, 2:4])

agg_data = aggregate_signal(Data$data, window_length = 100)

agg_data$AI = apply(agg_data, MARGIN = 1,
                    FUN = calculate_activity_index,
                    stationary_variance = stat_var,
                    relative_activity_index = F)

head(agg_data)
```

```{r Identify activity bouts}

a_bouts = identify_activity_bouts(agg_data$AI, report_short_bouts = T)

a_bouts$activity_bouts

```

```{r}
hist_data = a_bouts$activity_bouts[a_bouts$activity_bouts$bout_status==1,]

ggplot(hist_data, aes(x = bout_length))+
  theme_bw() +
  geom_histogram() +
  lims(x = c(0,60)) +
  labs(x = "Bout length (s)")


```

```{r Map activity bouts back onto original raw acc data}

Data$data$bout_status = map_bouts(Data$data, a_bouts$activity_bouts)

head(Data$data)

bout_rl_encoding = rle(Data$data$bout_status)

bout_rl_encoding = tibble(
  lengths = bout_rl_encoding$lengths,
  values = 1:length(bout_rl_encoding$lengths)
)

Data$data$bout_index = inverse.rle(bout_rl_encoding)

hist(Data$data$bout_index)
```

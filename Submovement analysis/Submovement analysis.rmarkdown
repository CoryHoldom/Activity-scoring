---
title: "Submovement analysis"
author: "Cory Holdom"
format:
  html: default
  gfm: default
editor: visual
echo: true
root.dir: 
---




# Overview




```{r Header}
## ---------------------------
##
## Script name: Submovement analysis
##
## Purpose of script:
##
## Author: Dr. Cory Holdom
##
## Date Created: 2025-08-07
##
## Copyright (c) Cory Holdom, 2025
## Email: cory.holdom@ndcn.ox.ac.uk
##
## ---------------------------
##
## Notes:
##   
##
## ---------------------------
```




# Load libraries and source files




```{r Libraries}
source(here::here("Summary metrics/activity_bouts.R"))
source(here::here("Summary metrics/activity_index.R"))
source(here::here("Summary metrics/cum_power.R"))
source(here::here("Summary metrics/submovements.R"))

library(dplyr)
library(ggplot2)
library(glue)
#library(data.table)
#library(tidytable)
```




# Walking data




```{r}
# walk_data = readr::read_csv(here::here("Motionsense Data/A_DeviceMotion_data/wlk_7/sub_1.csv"))
# 
# names(walk_data)[1] = "time"
# 
# walk_data = select(walk_data, time, userAcceleration.x:userAcceleration.z)
# 
# names(walk_data)[2:4] = c("x","y","z")
# 
# walk_data$bout_index = 1
# 
# walk_data$bout_status = 1
# 
# walk_data$time = seq(1, nrow(walk_data)) * 0.02 - 0.02
# 
# # Bandpass filter
# walk_data[c("x_f", "y_f", "z_f")] = clean_acc(raw_signal = select(walk_data, x:z), fs = 50, freq_cutoff = c(0.1,10))
# 
# walk_data[c("vel_x", "vel_y", "vel_z")] = calculate_velocity(walk_data, 50)
# 
# ggplot(walk_data, aes(x = time)) +
#   theme_bw() + 
#   geom_line(aes(y = vel_x), colour = "red") +
#   geom_line(aes(y = vel_y), colour = "blue") +
#   geom_line(aes(y = vel_z), colour = "green") +
#   geom_line(aes( y = (vel_x**2 + vel_y**2 + vel_z**2)**0.5))
# 
# walk_data[c("vel_pc1", "vel_pc2", "vel_pc3")] = project_velocity(walk_data)
# 
# Hmisc::rcorr(as.matrix(walk_data[10:15]))$r[c("vel_pc1","vel_pc2","vel_pc3"), c("vel_x","vel_y","vel_z")] |> round(2)
# 
# ggplot(walk_data, aes(x = time)) +
#   theme_bw() + 
#   geom_line(aes(y = vel_pc1), colour = "red") +
#   geom_line(aes(y = vel_pc2), colour = "blue") +
#   geom_line(aes(y = vel_pc3), colour = "green") +
#   geom_line(aes( y = (vel_x**2 + vel_y**2 + vel_z**2)**0.5))
# 
# sub_boundaries = identify_submovement_boundaries(walk_data)
# 
# walk_data[c("vel_pc1_sm", "vel_pc2_sm", "vel_pc3_sm")] = map_submovement_bouts(walk_data, sub_boundaries)
# 
# ggplot(walk_data, aes(x = time, y = vel_pc1, colour = as.character(vel_pc1_sm))) +
#   geom_line(show.legend = F)
# 
# (walk_data |> group_by(vel_pc1_sm, vel_pc2_sm) |> summarise(n = n())) |> ggplot(aes(x = n/50)) + scale_x_log10() + geom_histogram()
# 
# cor.test(walk_data$vel_pc1_sm, walk_data$vel_pc3_sm, method = "k")
# 
# p1 = ggplot(walk_data, aes(x = time)) +
#   geom_line(aes(y = vel_pc1_sm), colour = "red") +
#   geom_line(aes(y = vel_pc2_sm), colour = "blue") +
#   geom_line(aes(y = vel_pc3_sm), colour = "green")
# 
# p2 = ggplot(walk_data, aes(x = time)) +
#   geom_line(aes(y = vel_pc1), colour = "red") +
#   geom_line(aes(y = vel_pc2), colour = "blue") +
#   geom_line(aes(y = vel_pc3), colour = "green")
# 
# p3 = ggplot(walk_data, aes(x = time)) +
#   geom_line(aes(y = x_f), colour = "red") +
#   geom_line(aes(y = y_f), colour = "blue") +
#   geom_line(aes(y = z_f), colour = "green")
# 
# ggpubr::ggarrange(p1,p2,p3,nrow=3)
# 
# ggplot(sub_boundaries$vel_pc1, aes(x = submovement_length/50)) +
#   geom_histogram() +
#   scale_x_log10()
```




# Week long recording (example data from Doherty paper)




```{r cwa_example}

header = GGIRread::readAxivity(here::here("Example CWA/sample.cwa"))$header

daily_data = GGIRread::readAxivity(here::here("Example CWA/sample.cwa"), end = header$blocks, header = header)

daily_data = daily_data$data[1:4]

head(daily_data)

stat_var = mean((calculate_windowed_sd(daily_data[2:4]) |>
  filter(stdev < 0.013))$stdev)

agged_signal = aggregate_signal(daily_data, window_length = 100)

agged_signal$AI = apply(agged_signal, MARGIN = 1,
                    FUN = calculate_activity_index,
                    stationary_variance = stat_var,
                    relative_activity_index = F)

acti_bouts = identify_activity_bouts(activity_indices = agged_signal$AI,
                                     report_short_bouts = F)

daily_data$bout_status = map_activity_bouts(daily_data, acti_bouts$activity_bouts)

bout_rl_encoding = rle(daily_data$bout_status)

bout_rl_encoding = tibble(
  lengths = bout_rl_encoding$lengths,
  values = 1:length(bout_rl_encoding$lengths)
)

daily_data$bout_index = inverse.rle(bout_rl_encoding)

daily_data$dt = daily_data$time - min(daily_data$time)

# Bandpass filter
daily_data[c("x_f", "y_f", "z_f")] = clean_acc(raw_signal = select(daily_data, x:z), fs = 100, freq_cutoff = c(0.1,10))

daily_data[c("vel_x", "vel_y", "vel_z")] = calculate_velocity(daily_data, fs = 100)

# ggplot(daily_data[1000000:1090000,], aes(x = dt)) +
#   theme_bw() + 
#   geom_line(aes(y = vel_x), colour = "red") +
#   geom_line(aes(y = vel_y), colour = "blue") +
#   geom_line(aes(y = vel_z), colour = "green") +
#   geom_line(aes(y = (vel_x**2 + vel_y**2 + vel_z**2)**0.5))

daily_data[c("vel_pc1", "vel_pc2", "vel_pc3")] = project_velocity(daily_data)

Hmisc::rcorr(as.matrix(daily_data[11:16]))$r[c("vel_pc1","vel_pc2","vel_pc3"), c("vel_x","vel_y","vel_z")] |> round(2)

# ggplot(daily_data[1000000:1090000,], aes(x = dt)) +
#   theme_bw() + 
#   geom_line(aes(y = vel_pc1), colour = "red") +
#   geom_line(aes(y = vel_pc2), colour = "blue") +
#   geom_line(aes(y = vel_pc3), colour = "green") +
#   geom_line(aes( y = (vel_x**2 + vel_y**2 + vel_z**2)**0.5))

sub_boundaries = identify_submovement_boundaries(daily_data)

daily_data[c("vel_pc1_sm", "vel_pc2_sm", "vel_pc3_sm")] = map_submovement_bouts(daily_data, sub_boundaries)

```




# Submovement analyses




```{r}
library(data.table)
library(tidytable)

# Histogram of submovement durations
sm_lengths = (daily_data |>
  group_by(vel_pc1_sm) |>
  summarise(n = n()))

# ggplot(sm_lengths, aes(x = n/100)) +
#   theme_bw() +
#   annotate(geom = "rect", xmin = 0.05, xmax = 0.6, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "#F3655C") +
#   annotate(geom = "rect", xmin = 0.6, xmax = 5, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "#5F1780") +
#   geom_density() +
#   scale_x_log10() +
#   labs(x = "Submovement duration length (s)", y = "Density")


# Within each submovement (PC1 and PC2), calculate duration, distance, peak Vel
#    - Duration = length (/fs)
#    - Distance = cumsum of velocity
#    - Peak Vel = max

daily_data = as_tidytable(daily_data)

plot_data = daily_data |>
  group_by(vel_pc1_sm) |>
  filter(n() <= 500 & n() >= 5)

plot_data = plot_data[vel_pc1_sm %in% sample(unique(plot_data$vel_pc1_sm), size = 20),]

#plot_data = plot_data[vel_pc1_sm %in% head(unique(plot_data$vel_pc1_sm), 20),]

plot_data = plot_data |>
  mutate(dt = (time - min(time))/max(time - min(time)),
         vel_pc1_rel = vel_pc1/max(abs(vel_pc1))) |>
  ungroup()

time_ends = (plot_data |>
  group_by(vel_pc1_sm) |>
  summarise(origin_dt = (nth(time, 6) - first(time))/max(time - min(time))))$origin_dt

label_ends = data.frame(
  t_ends = time_ends,
  vel_pc1_sm = unique(plot_data$vel_pc1_sm)
)

ggplot(plot_data, aes(x = dt, y = vel_pc1_rel, group = vel_pc1_sm)) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5),
        strip.background = element_blank(),
        strip.text = element_blank()) +
  geom_line() +
  facet_wrap(~vel_pc1_sm) +
  geom_segment(data = label_ends, aes(x = 1-t_ends), xend = 1, y = -1.2) +
  lims(y = c(-1.25, 1.25)) +
  labs(x = "Normalised time", y = "Normalised velocity", caption = "Scale bar in bottom-right of plots show 50ms")

ggplot(plot_data, aes(x = dt, y = vel_pc1_rel, group = vel_pc1_sm)) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5),
        strip.background = element_blank(),
        strip.text = element_blank()) +
  geom_line() +
  #facet_wrap(~vel_pc1_sm) +
  #geom_segment(data = label_ends, aes(x = 1-t_ends), xend = 1, y = -1.2) +
  lims(y = c(-1.25, 1.25)) +
  labs(x = "Normalised time", y = "Normalised velocity")
  

```

```{r}
plot_data = daily_data |>
  group_by(vel_pc2_sm) |>
  filter(n() <= 500 & n() >= 5)

plot_data = plot_data[vel_pc2_sm %in% sample(unique(plot_data$vel_pc2_sm), size = 20),]

#plot_data = plot_data[vel_pc1_sm %in% head(unique(plot_data$vel_pc1_sm), 20),]

plot_data = plot_data |>
  mutate(dt = (time - min(time))/max(time - min(time)),
         vel_pc2_rel = vel_pc2/max(abs(vel_pc2))) |>
  ungroup()

time_ends = (plot_data |>
  group_by(vel_pc2_sm) |>
  summarise(origin_dt = (nth(time, 6) - first(time))/max(time - min(time))))$origin_dt

label_ends = data.frame(
  t_ends = time_ends,
  vel_pc2_sm = unique(plot_data$vel_pc2_sm)
)

ggplot(plot_data, aes(x = dt, y = vel_pc2_rel, group = vel_pc2_sm)) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5),
        strip.background = element_blank(),
        strip.text = element_blank()) +
  geom_line() +
  facet_wrap(~vel_pc2_sm) +
  geom_segment(data = label_ends, aes(x = 1-t_ends), xend = 1, y = -1.2) +
  lims(y = c(-1.25, 1.25)) +
  labs(x = "Normalised time", y = "Normalised velocity", caption = "Scale bar in bottom-right of plots show 50ms")
```

```{r}
# Within each submovement (PC1 and PC2), calculate duration, distance, peak Vel
#    - Duration = length (/fs)
#    - Distance = cumsum of velocity
#    - Peak Vel = max

daily_data = as_tidytable(daily_data)


```

```{r}
scientific_10 <- function(x) {
  gsub("e", " x 10^", scales::scientific_format()(x))
}


hist_data = daily_data |>
  #filter(vel_pc1_sm %% 2 == 1) |>
  group_by(vel_pc1_sm) |>
  summarise(dur = n()/100, distance = sum(abs(vel_pc1))/100, peak = max(abs(vel_pc1))) |>
  ungroup()

ggplot(hist_data, aes(x = dur)) +
  theme_bw() +
  geom_density() +
  scale_x_log10()

ggplot(hist_data) +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  geom_density(aes(x = peak, colour = dur>0.1), alpha = 0.3) +
  geom_density(aes(x = peak, colour = dur>0.2), alpha = 0.3) +
  geom_density(aes(x = peak, colour = dur>0.3), alpha = 0.3) +
  geom_density(aes(x = peak, colour = dur>0.4), alpha = 0.3) +
  geom_density(aes(x = peak, colour = dur>0.5), alpha = 0.3) +
  geom_density(aes(x = peak, colour = dur>0.6), alpha = 1) +
  geom_density(aes(x = peak, colour = dur>0.7), alpha = 0.3) +
  geom_density(aes(x = peak, colour = dur>0.8), alpha = 0.3) +
  geom_density(aes(x = peak, colour = dur>0.9), alpha = 0.3) +
  geom_density(aes(x = peak, colour = dur>1.0), alpha = 0.3) +
  scale_x_continuous(trans = "log10", label=scientific_10) +
  scale_colour_manual(labels = c("Short", "Long"), values = c("#F3655C", "#5F1780")) +
  labs(x = "Peak velocity during submovement (m/s)", y = "Density", colour = "Duration")

ggplot(hist_data, aes(x = peak)) +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  geom_line(aes(colour = dur>0.1), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.2), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.3), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.4), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.5), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.6), stat = "density", alpha = 1) +
  geom_line(aes(colour = dur>0.7), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.8), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.9), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>1.0), stat = "density", alpha = 0.3) +
  scale_x_continuous(trans = "log10", label=scientific_10) +
  scale_colour_manual(labels = c("Short", "Long"), values = c("#F3655C", "#5F1780")) +
  labs(x = "Peak velocity during submovement (m/s)", y = "Density", colour = "Duration")

ggplot(hist_data, aes(x = dur)) +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  geom_line(aes(colour = dur>0.1), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.2), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.3), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.4), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.5), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.6), stat = "density", alpha = 1) +
  geom_line(aes(colour = dur>0.7), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.8), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>0.9), stat = "density", alpha = 0.3) +
  geom_line(aes(colour = dur>1.0), stat = "density", alpha = 0.3) +
  geom_vline(xintercept = 0.6, linetype = "dashed") +
  scale_x_log10() +
  scale_colour_manual(labels = c("Short", "Long"), values = c("#F3655C", "#5F1780")) +
  labs(x = "Submovement duration (s)", y = "Density", colour = "Duration")

```

```{r}
daily_data = label_submovements(daily_data)

test_daily_data = daily_data |>
  filter(vel_pc1_sm_type == "Long")

test_daily_data =  test_daily_data |>
    summarise(pc1_sm = resample_submovement(vel_pc1), .by = vel_pc1_sm)

test_daily_data = test_daily_data |>
  mutate(dt = row_number(), .by = vel_pc1_sm)

test_daily_data = test_daily_data |>
  mutate(vel_pc1_sm_norm = normalise_submovement_velocity(pc1_sm), .by = vel_pc1_sm)



test_daily_data$vel_pc1_sm_norm = remove_extreme_velocity(test_daily_data,
                                                          col_name = vel_pc1_sm_norm,
                                                          submovement_group_col_name = vel_pc1_sm)

# test_daily_data$vel_pc2_sm_norm = remove_extreme_velocity(test_daily_data,
#                                                           col_name = vel_pc2_sm_norm,
#                                                           submovement_group_col_name = vel_pc2_sm)
# 
# test_daily_data$vel_pc3_sm_norm = remove_extreme_velocity(test_daily_data,
#                                                           col_name = vel_pc3_sm_norm,
#                                                           submovement_group_col_name = vel_pc3_sm)

ggplot(test_daily_data[!is.na(test_daily_data$vel_pc1_sm_norm) & vel_pc1_sm < 54], aes(x = dt, y = vel_pc1_sm_norm)) +
  theme_bw() +
  theme(panel.grid = element_blank(), strip.text = element_blank()) +
  geom_line() +
  facet_wrap(~vel_pc1_sm) +
  scale_x_continuous(breaks = c(0,40)) +
  scale_y_continuous(breaks = c(0,1)) +
  labs(x = "Resampled time", y = "Normalised velocity")
```

```{r}
wide_submovements = pivot_wider(test_daily_data, names_from = dt, values_from = vel_pc1_sm_norm,id_cols = vel_pc1_sm)

wide_submovements = as.matrix(wide_submovements[,-1])

wide_submovements = list(
  "submovement" = 1:nrow(wide_submovements),
  pc1 = as.matrix(wide_submovements)
)

valid_sms = !rowSums(!is.finite(wide_submovements$pc1))

# remove all rows with non-finite values
#wide_submovements$pc1[valid_sms,]

FPCAdense = refund::fpca.face(Y = wide_submovements$pc1[valid_sms,])

plot(FPCAdense$efunctions[,2], type = "l")




plot_data_eigenfunctions = FPCAdense$efunctions[,1:5] |> as.data.frame()

plot_data_eigenfunctions = rowid_to_column(plot_data_eigenfunctions)

plot_data_eigenfunctions = rename(plot_data_eigenfunctions, dt = rowid)

ggplot(plot_data_eigenfunctions, aes(x = dt)) +
  theme_bw() +
  geom_line(aes(y = V1), colour = "#000000", linewidth = 3) +
  geom_line(aes(y = V2), colour = "#333333", linewidth = 2.5) +
  geom_line(aes(y = V3), colour = "#666666", linewidth = 2) +
  geom_line(aes(y = V4), colour = "#999999", linewidth = 1.5) +
  geom_line(aes(y = V5), colour = "#cccccc", linewidth = 1)

var_explained = FPCAdense$evalues |> prop.table()

plot_eigs = list(
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = V1), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 1 - {round(var_explained[1], 2) * 100}%")),
  
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = V2), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 2 - {round(var_explained[2], 2) * 100}%")),
  
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = V3), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 3 - {round(var_explained[3], 2) * 100}%")),
  
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = V4), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 4 - {round(var_explained[4], 2) * 100}%")),
  
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = V5), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 5 - {round(var_explained[5], 2) * 100}%")))
  
ggpubr::ggarrange(plotlist = plot_eigs)


FPCAdense$evalues |> prop.table()

plot_eigs = list(
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = -V1), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 1 - {round(var_explained[1], 2) * 100}%")),
  
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = -V2), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 2 - {round(var_explained[2], 2) * 100}%")),
  
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = -V3), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 3 - {round(var_explained[3], 2) * 100}%")),
  
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = -V4), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 4 - {round(var_explained[4], 2) * 100}%")),
  
  ggplot(plot_data_eigenfunctions, aes(x = dt)) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          axis.title.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank()) +
    geom_line(aes(y = -V5), colour = "#000000", linewidth = 1) +
    labs(subtitle = glue("Eigenfunction 5 - {round(var_explained[5], 2) * 100}%")))


FPCAdense$scores |> dim()

plot(FPCAdense$mu + 
       FPCAdense$scores[1:40,1] * FPCAdense$efunctions[,1] +
       FPCAdense$scores[1:40,2] * FPCAdense$efunctions[,2] +
       FPCAdense$scores[1:40,3] * FPCAdense$efunctions[,3] +
       FPCAdense$scores[1:40,4] * FPCAdense$efunctions[,4] +
       FPCAdense$scores[1:40,5] * FPCAdense$efunctions[,5], type = "l")

lines((wide_submovements$pc1[valid_sms,] |> t())[1:40,1])






plot(FPCAdense$mu + 
       FPCAdense$scores[41:80,1] * FPCAdense$efunctions[,1] +
       FPCAdense$scores[41:80,2] * FPCAdense$efunctions[,2] +
       FPCAdense$scores[41:80,3] * FPCAdense$efunctions[,3] +
       FPCAdense$scores[41:80,4] * FPCAdense$efunctions[,4] +
       FPCAdense$scores[41:80,5] * FPCAdense$efunctions[,5], type = "l")

lines((wide_submovements$pc1[valid_sms,] |> t())[1:40,2])






plot(FPCAdense$mu + 
       FPCAdense$scores[81:120,1] * FPCAdense$efunctions[,1] +
       FPCAdense$scores[81:120,2] * FPCAdense$efunctions[,2] +
       FPCAdense$scores[81:120,3] * FPCAdense$efunctions[,3] +
       FPCAdense$scores[81:120,4] * FPCAdense$efunctions[,4] +
       FPCAdense$scores[81:120,5] * FPCAdense$efunctions[,5] +
       FPCAdense$scores[81:120,6] * FPCAdense$efunctions[,6] +
       FPCAdense$scores[81:120,7] * FPCAdense$efunctions[,7] +
       FPCAdense$scores[81:120,8] * FPCAdense$efunctions[,8] +
       FPCAdense$scores[81:120,9] * FPCAdense$efunctions[,9] +
       FPCAdense$scores[81:120,10] * FPCAdense$efunctions[,10], 
     
     type = "l")

lines((wide_submovements$pc1[valid_sms,] |> t())[1:40,3])






## Example reconstruction

pc_scores = FPCAdense$scores[1:400,] |> as.data.frame()

pc_scores$submovement = rep(1:10,each = 40)

eigens = FPCAdense$efunctions



pc_scores = split(pc_scores, f = pc_scores$submovement)

fitted_pcs = lapply(X = pc_scores, FUN = function(x) {x[,1:17] * eigens + FPCAdense$mu}) |> bind_rows()

fitted_pcs$submovement = rep(1:10,each = 40)

fitted_pcs$dt = rep(1:40, 10)

measured_signal = (wide_submovements$pc1[valid_sms,] |> t())[,1:10] |> as.data.frame()

measured_signal$dt = 1:40

#reconstructed = cbind(fitted_pcs, measured_signal)

#reconstructed = rownames_to_column(reconstructed, var = "dt")

#reconstructed$dt = as.numeric(reconstructed$dt)

# ggplot(reconstructed) +
#   geom_line(aes(x = dt, y = X10), linetype = "dashed") +
#   geom_line(aes(x = dt, y = V10))

ggplot() +
  geom_lines(data = fitted_pcs, aes(x = dt, y = ))
```

```{r}
#FPCA
library(fdapace)

# sub_test_daily_data = test_daily_data[!is.na(test_daily_data$vel_pc1_sm_norm) & vel_pc1_sm < 50]

sub_test_daily_data = test_daily_data[!is.na(test_daily_data$vel_pc1_sm_norm)]

L3 = MakeFPCAInputs(IDs = rep(1:nrow(sub_test_daily_data)/40, each = 40), tVec = sub_test_daily_data$dt, yVec = sub_test_daily_data$vel_pc1_sm_norm, na.rm = T)

FPCAdense = FPCA(L3$Ly, L3$Lt, optns = list(dataType = "Dense",
                                            methodMuCovEst = "smooth",
                                            methodBwCov = "GCV",
                                            FVEthreshold = 0.95))


## Function to extract PC scores from FPCA object
extract_fpc_scores <- function(df, fpca_obj, fpcs = 1:fpca_obj$selectK) {
  
  # Source: https://people.linguistics.mcgill.ca/~morgan/adv-quant-methods/FDA_edited.html
  
  for (fpc in fpcs) {
    df <- df %>% 
      mutate('fpc{fpc}' := fpca_obj$xiEst[,fpc]) # Creates a column `fpcx`, where x = fpc, for the scores
  }
  
    return(df)
}

sub_test_daily_data = extract_fpc_scores(sub_test_daily_data, FPCAdense)


ggplot(sub_test_daily_data, aes(x = fpc2)) +
  theme_bw() +
  geom_histogram() +
  facet_wrap(~vel_pc1_sm)

ggplot(sub_test_daily_data, aes(x = pc1_sm, y = fpc1)) +
  geom_point(alpha = 0.1)




# Create a dataframe with mean and the principal components
fpcs = with(FPCAdense,
     data.frame(.index = obsGrid,
                mu = mu,
                FPC1 = phi[, 1],
                FPC2 = phi[, 2],
                FPC3 = phi[, 3])) |>
  mutate(index = floor(.index)) |>
  select(-.index)









plot.(FPCAdense)

FPCAdense$phi

phis = FPCAdense$phi[,1:3] |> as.data.frame()

phis$dt = seq(1,40)/40

ggplot(phis, aes(x = dt)) +
  theme_bw() +
  geom_line(aes(y = V1), colour = "#dd8888") +
  geom_line(aes(y = V2), colour = "#88dd88") +
  geom_line(aes(y = V3), colour = "#8888dd")
 # geom_line(aes(y = V4), colour = "#8844dd") +
  #geom_line(aes(y = V5))
  
  
  
ggplot(phis, aes(x = dt)) +
  theme_bw() +
  geom_line(aes(y = V1), colour = "#dd8888", stat = "smooth", method = "loess") +
  geom_line(aes(y = V2), colour = "#88dd88", stat = "smooth", method = "loess") +
  geom_line(aes(y = V3), colour = "#8888dd", stat = "smooth", method = "loess")
  geom_line(aes(y = V4), colour = "#8844dd", stat = "smooth", method = "loess") +
  geom_line(aes(y = V5), colour = "#4d4d4d", stat = "smooth", method = "loess")
```

```{r}
FPCAdense$lambda |> cumsum()

FPCAdense$cumFVE

plot(rev(FPCAdense$lambda), FPCAdense$cumFVE)

Covariance_mat = (FPCAdense$smoothedCov |> Hmisc::rcorr())$r

cor_res = FPCAdense$smoothedCov |>
  as.data.frame() |>
  correlation::correlation(redundant = T)

par_levels = paste0("V", c(1:40))

cor_res$Parameter1 = factor(cor_res$Parameter1, levels = par_levels)
cor_res$Parameter2 = factor(cor_res$Parameter2, levels = par_levels)

ggplot(arrange(cor_res, Parameter1, Parameter2), aes(x = Parameter1, y = Parameter2, fill = r)) +
  geom_tile() +
  scale_x_discrete(drop = F) +
  scale_y_discrete(drop = F) + 
  scale_fill_gradient2(low = "#dd4444",mid = "#ffffff", high = "#4444dd") +
  labs(x = "t1", y = "t2")


plot(cor_res, show_data = NA)
  
corrplot::corrplot(FPCAdense$smoothedCov, method = "color", is.corr = F)

corrplot::corrplot(Covariance_mat, method = "color")





```

```{r}
# A convenience function for visualizing the effects of FPCs, adapted from Puggaard-Rode (2023)
plot_fpc_effects <- function(fpca_obj, fpcs = 1:fpca_obj$selectK, range = c(0, 1)) {
  vals <- data.frame()
  
  for (fpc in fpcs) {
    vals <- vals %>% 
      rbind(data.frame(fpc = paste0('FPC', fpc),
                       measurement = fpca_obj$obsGrid, mu = fpca_obj$mu,
                       highq = fpca_obj$mu + quantile(fpca_obj$xiEst[, fpc], range[2]) * fpca_obj$phi[, fpc],
                       lowq = fpca_obj$mu + quantile(fpca_obj$xiEst[, fpc], range[1]) * fpca_obj$phi[, fpc]))
  }
 
  vals <- vals %>% 
    mutate(fpc = fpc %>% as.factor()) %>% 
    pivot_longer(cols = c(mu, highq, lowq))

  plt <- vals %>% 
    ggplot(aes(x = measurement, y = value, colour = name)) +
    theme_bw() +
    geom_line(linewidth = 1) +
    facet_wrap(~fpc, ncol = 3) +
    xlab('Time*') +
    ylab('Velocity*') + 
    scale_colour_manual(values = c('red', 'blue', 'gray'),
                       name = 'Score',
                       labels = c('Low', 'High', 'Mean')) +
    theme(legend.position = 'bottom')
    
  return(plt)
}

FPCAdense |>
  plot_fpc_effects(fpcs = 1:3)
```

